---
import Banner from "../components/solid/Banner.tsx";
import Cart from "../components/solid/Cart.tsx";
import Menu from "../components/solid/Menu";
import MobileNav from "../components/solid/MobileNav.tsx";
import { getStytchClient, isLoggedIn } from "../lib/stytch";
import { session_duration_minutes } from "../lib/constants";
import { StytchError } from "stytch";

// Initialize error state
const errors = { code: "", general: "", email: "" };
const runtime = Astro.locals.runtime;
const { STYTCH_PROJECT_ID, STYTCH_PROJECT_SECRET } =
  runtime?.env || import.meta.env;

// Extract method_id from the URL
const url = new URL(Astro.request.url);
let method_id = url.searchParams.get("method_id");

// Handle POST request for both OTP submission and resend OTP request
if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const code = data.get("otp-input")?.toString();

  // Validate the code and method_id
  if (!code || !/^[0-9]+$/.test(code)) {
    errors.code = "Code is not valid.";
    return;
  }
  if (!method_id) {
    errors.code = "Method ID is not valid.";
    return;
  }

  try {
    const stytchclient = getStytchClient(
      STYTCH_PROJECT_ID,
      STYTCH_PROJECT_SECRET,
    );
    // Make stytchclient API call to authenticate OTP
    const resp = await stytchclient.otps.authenticate({
      code,
      method_id,
      session_duration_minutes,
    });

    if (!resp.session_token) {
      errors.code = "Failed to authenticate. Please try again.";
      return;
    }

    // Set session cookie
    Astro.cookies.set("gp_session_token", resp.session_token, {
      path: "/",
      httpOnly: true,
      secure: true,
      sameSite: "lax",
      expires: new Date(Date.now() + session_duration_minutes * 60 * 1000),
    });

    return Astro.redirect("/?message=successLoggedIn#basket");
  } catch (error) {
    console.error(error);

    // Check if the error is of type StytchError and has a specific error type
    if (
      error instanceof StytchError &&
      error.error_type === "otp_code_not_found"
    ) {
      errors.code = "Oops, wrong passcode. Try again or request a new one.";
    } else {
      // Handle other types of errors
      errors.code = "Unknown error, please reach out to us for help!";
    }
  }
}

// Redirect authenticated users away from login page
const sessionToken = Astro.cookies.get("gp_session_token")?.value;
const isUserLoggedIn = await isLoggedIn(
  sessionToken as string,
  STYTCH_PROJECT_ID,
  STYTCH_PROJECT_SECRET,
);

if (isUserLoggedIn) {
  return Astro.redirect("/?message=errorAlreadyLoggedIn");
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Goodpluck</title>
  </head>
  <body>
    <div class="sticky top-0 h-full">
      <Banner client:load />
      <MobileNav client:load />
    </div>
    <Cart client:load />
    <Menu client:load />
  </body>
  <div class="flex items-center justify-center h-screen bg-gray-100">
    <div class="bg-white p-8 rounded shadow-md w-full max-w-sm">
      <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">
        Check your email!
      </h2>
      <form method="POST">
        <label for="otp-input">Enter code</label>
        <input
          class="border rounded-md p-2 w-full mb-4"
          id="otp-input"
          data-testid="otp-input"
          name="otp-input"
          autocomplete="one-time-code"
          inputmode="numeric"
          pattern="[0-9]*"
          required
        />
        {errors.code && <p data-testid="login-code-error">{errors.code}</p>}
        <button
          class="bg-blue-500 text-white rounded-md p-2 w-full mb-2 hover:bg-blue-600"
          type="submit"
          data-testid="submit-login-code-btn">Submit</button
        >
      </form>
    </div>
  </div>
</html>
