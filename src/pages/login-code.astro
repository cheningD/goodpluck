---
import { stytch, isLoggedIn } from "../lib/stytch";
import { SESSION_DURATION_MINUTES } from "../lib/constants";
import { StytchError } from "stytch";
import AuthLayout from "../layouts/AuthLayout.astro";

// Initialize error state
const errors = { code: "", general: "", email: "" };

// Extract method_id from the URL
const url = new URL(Astro.request.url);
let method_id = url.searchParams.get("method_id");
if (!method_id) {
  return Astro.redirect("/login");
}

const email_query_arg = url.searchParams.get("email");
let email;
if (email_query_arg) {
  email = decodeURIComponent(email_query_arg);
}

//const user_exists = url.searchParams.get("user_exists");

// Handle POST request for both OTP submission and resend OTP request
if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const code = data.get("otp-input")?.toString();

  // Validate the code and method_id
  if (!code || !/^[0-9]+$/.test(code)) {
    errors.code = "Code is not valid.";
    return;
  }
  if (!method_id) {
    errors.code = "Method ID is not valid.";
    return;
  }

  try {
    // Make stytchclient API call to authenticate OTP
    const resp = await stytch.otps.authenticate({
      code,
      method_id,
      session_duration_minutes: SESSION_DURATION_MINUTES,
    });

    if (!resp.session_token) {
      errors.code = "Failed to authenticate. Please try again.";
      return;
    }

    // Set session cookie
    Astro.cookies.set("gp_session_token", resp.session_token, {
      path: "/",
      httpOnly: true,
      secure: true,
      sameSite: "lax",
      expires: new Date(Date.now() + SESSION_DURATION_MINUTES * 60 * 1000),
    });

    return Astro.redirect("/join/personal-info");
  } catch (error) {
    console.error(error);

    // Check if the error is of type StytchError and has a specific error type
    if (
      error instanceof StytchError &&
      error.error_type === "otp_code_not_found"
    ) {
      errors.code = "Oops, wrong passcode. Try again or request a new one.";
    } else {
      // Handle other types of errors
      errors.code = "Unknown error, please reach out to us for help!";
    }
  }
}

// Redirect authenticated users away from login page
const sessionToken = Astro.cookies.get("gp_session_token")?.value;
const isUserLoggedIn = sessionToken && !!(await isLoggedIn(sessionToken));

if (isUserLoggedIn) {
  return Astro.redirect(
    "/?message=" + encodeURIComponent("You are already logged in"),
  );
}
---

<AuthLayout title="Goodpluck">
  <!-- OTP Verification Form -->
  <form method="POST" id="otp-form">
    <h1 class="text-3xl mt-4 mb-4 font-semibold text-gray-900 text-center">
      Check your email for a code
    </h1>
    <p class="text-center mb-10">
      We sent a code to {email ? email : " your email"}. The code expires
      shortly, so please enter it soon.
    </p>

    <input
      class="border rounded-md p-2 w-full mb-6 mt-2 text-2xl tracking-widest"
      id="otp-input"
      name="otp-input"
      autocomplete="one-time-code"
      inputmode="numeric"
      pattern="[0-9]*"
      placeholder="enter code"
      required
    />
    {
      errors.code && (
        <p id="login-code-error" class="text-red-400">
          {errors.code}
        </p>
      )
    }
    {errors.general && <p class="text-red-400">{errors.general}</p>}
    <button
      class="px-6 py-4 mt-6 w-full bg-brand-yellow border-2 border-black text-center rounded shadow-md hover:bg-yellow-400"
      id="submit-login-code-btn"
      type="submit">Sign In</button
    >
  </form>

  <!-- Resend OTP -->
  <p class="mt-6 text-center text-gray-600" id="resend-text">
    Been waiting a minue?
    <a
      id="resend-button"
      class="text-orange-500 hover:underline"
      type="submit"
      href="/login?resend=true"
    >
      Try again
    </a>
  </p>
</AuthLayout>
