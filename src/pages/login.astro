---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="flex items-center justify-center h-screen bg-gray-100">
    <div class="bg-white p-8 rounded shadow-md w-full max-w-sm">
      <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">Log in</h2>
      <p class="text-gray-600 mb-6 text-center">
        Welcome back! Enter your email and password to log in.
      </p>
      <form method="POST" id="loginForm">
        <p
          id="error"
          class="mb-4 text-sm font-medium text-red-600 bg-red-50 p-2 rounded border border-red-500 hidden"
        >
        </p>

        <!-- Email Field -->
        <label for="email" class="block text-sm font-medium mb-2 text-gray-700">
          Email:
        </label>
        <input
          type="email"
          id="email"
          name="email"
          placeholder="kale@example.com"
          required
          class="border rounded-md p-2 w-full mb-4"
        />

        <!-- Password Field -->
        <label
          for="password"
          class="block text-sm font-medium mb-2 text-gray-700"
        >
          Password:
        </label>
        <input
          type="password"
          id="password"
          name="password"
          placeholder="tomato3-Mushrooms!"
          required
          class="border rounded-md p-2 w-full mb-4"
        />

        <!-- Submit Button -->
        <button
          data-testid="login-btn"
          class="bg-blue-500 text-white rounded-md p-2 w-full mb-2 hover:bg-blue-600"
        >
          Login
        </button>
      </form>
      <p class="mt-6 text-sm text-center text-gray-600">
        Haven't joined yet? <a
          href="/join"
          class="text-orange-500 hover:underline">Create an account</a
        >
      </p>
    </div>
  </div>

  <script>
    import { getSwellClient } from "../lib/swell";

    const swell = getSwellClient(
      import.meta.env.PUBLIC_SWELL_STORE_ID,
      import.meta.env.PUBLIC_SWELL_PUBLIC_KEY,
    );

    // TODO: Update to redirect before page loads
    const checkLoginStatus = async () => {
      const loggedInUser = await swell.account.get();

      if (loggedInUser) {
        window.location.href =
          "/?message=" + encodeURIComponent("You are already logged in.");
      }
    };

    checkLoginStatus();

    document.addEventListener("DOMContentLoaded", () => {
      const form = document.getElementById("loginForm") as HTMLFormElement;
      const errorElement = document.getElementById("error");

      if (!form || !errorElement) {
        console.error("Missing form or error element.");
        return;
      }

      form.addEventListener("submit", async (event) => {
        event.preventDefault();
        errorElement.textContent = "";
        errorElement.classList.add("hidden");

        const formData = new FormData(form);
        const email = formData.get("email") as string;
        const password = formData.get("password") as string;

        if (!email || !password) {
          displayError("Email and password are required.");
          return;
        }

        try {
          await swell.account.login(email, password);
          const loggedInUser = await swell.account.get();

          if (loggedInUser) {
            // TODO: redirect users the create-account page if they don't have all the necessary info
            const sessionCookie = swell.session.getCookie();
            localStorage.setItem("swell_session_token", sessionCookie);
            window.location.href =
              "/?message=" + encodeURIComponent("You are now logged in.");
          } else {
            displayError("Invalid email or password.");
            // TODO: account for "Email not found. Do you need to create an account?"
          }
        } catch (error) {
          if (error instanceof Error) {
            displayError(
              "A network error or unexpected issue occurred, please try again later.",
            );
          } else {
            displayError(`Unexpected error occurred, please try again later.`);
          }
          console.error(error);
        }
      });

      const displayError = (message: string) => {
        errorElement.textContent = message;
        errorElement.classList.remove("hidden");
      };
    });
  </script>
</Layout>
