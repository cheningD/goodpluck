---
import { StytchError } from "stytch";
import { stytch, isLoggedIn } from "../lib/stytch";
import Layout from "../layouts/Layout.astro";

// Initialize error state
const errors = { email: "", general: "" };

// Handle POST request
if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const email = data.get("email")?.toString();

  // Validate email
  if (typeof email !== "string") {
    errors.email = "Email is not valid.";
    return; // Stop execution if the email is invalid
  }

  try {
    //@ts-expect-error
    const resp = await stytch.otps.email.send({
      email,
      expiration_minutes: 10,
    });
    return Astro.redirect("/login-code?method_id=" + resp.email_id);
  } catch (err) {
    console.error(err);
    if (err instanceof StytchError && err.error_type === "email_not_found") {
      errors.email = "Email not found. Do you need to create an account?";
    } else if (err instanceof Error) {
      errors.general =
        "A network error or unexpected issue occurred, please try again later.";
    } else {
      errors.general = `Unexpected error occurred, please try again later.`;
    }
  }
}

// Redirect authenticated users away from login page
const sessionToken = Astro.cookies.get("gp_session_token")?.value;
const isUserLoggedIn = sessionToken && !!(await isLoggedIn(sessionToken));

if (isUserLoggedIn) {
  return Astro.redirect(
    "/?message=" + encodeURIComponent("You are already logged in"),
  );
}
---

<Layout title="Goodpluck">
  <div class="flex flex-col py-40 w-full sm:w-[400px] mx-auto">
    <h1 class="text-4xl font-bold text-gray-900 mb-6 text-center">Log in</h1>
    <p class="py-4 text-center w-40 mx-auto">Enter your email to log in.</p>
    <form method="POST">
      {
        errors.general && (
          <p class="mb-4 text-sm font-medium text-red-600 bg-red-50 p-2 rounded border border-red-500">
            {errors.general}
          </p>
        )
      }
      <label
        for="email"
        class={`block text-sm font-medium mb-2 ${
          errors.email ? "text-red-700" : "text-gray-700"
        }`}
      >
        Email address
      </label>
      <input
        type="email"
        id="email"
        name="email"
        placeholder="kale@example.com"
        required
        class={`border rounded-md p-2 w-full mb-4 ${
          errors.email
            ? "bg-red-50 border-red-500 placeholder-red-700 focus:ring-red-500 focus:border-red-500 !mb-0"
            : ""
        }`}
      />
      {
        errors.email && (
          <p class="my-2 text-sm font-medium text-red-600">
            Oops! {errors.email}
          </p>
        )
      }
      <button
        data-testid="login-btn"
        class="px-6 py-4 w-full mt-8 bg-brand-yellow border-2 border-black text-center font-bold rounded shadow-md hover:bg-yellow-400 focus:shadow-md focus:top-[1px] focus:left-[1px] transition ease-in duration-50"
        >Continue</button
      >
    </form>
    <p class="mt-6 text-sm text-center text-gray-600">
      New here? <a href="/join" class="text-orange-500 hover:underline"
        >Create an account</a
      >
    </p>
  </div>
</Layout>
