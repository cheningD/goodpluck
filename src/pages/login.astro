---
import { StytchError } from "stytch";
import { stytchclient } from "../lib/stytch";
import Layout from "../layouts/Layout.astro";

// Initialize error state
const errors = { email: "", general: "" };

// Handle POST request
if (Astro.request.method === "POST") {
  try {
    // Collect form data and initialize params object
    const data = await Astro.request.formData();
    const email = data.get("email")?.toString();

    // Validate email
    if (typeof email !== "string") {
      errors.email = "Email is not valid.";
    } else {
      // Make stytch API call and handle errors within the same try-catch block
      try {
        const resp = await stytchclient.otps.email.send({
          email,
          expiration_minutes: 10,
        });

        return Astro.redirect("/login-code?method_id=" + resp.email_id);
      } catch (err) {
        console.error(err);
        if (
          err instanceof StytchError &&
          err.error_type === "email_not_found"
        ) {
          errors.email = "Email not found. Do you need to create an account?";
        } else {
          errors.general = "Unexpected error occurred, please try again later.";
        }
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
      errors.general =
        "A network error or unexpected issue occurred, please try again later.";
    }
  }
}

// TODO: move
// Function to check if the user's session is valid
async function isSessionValid() {
  const session_token = Astro.cookies.get("gp_session_token")?.value;
  if (session_token) {
    try {
      // Verify the session token with Stytch
      await stytchclient.sessions.authenticate({ session_token });
      return true; // Session is valid
    } catch (e) {
      if (e instanceof Error) {
        console.error("Session token invalid:", e.message);
      } else {
        console.error("An unexpected error occurred");
      }
    }
  }
  return false; // No valid session token found
}

// Redirect authenticated users away from login page
if (await isSessionValid()) {
  return Astro.redirect("/?message=errorAlreadyLoggedIn");
}
---

<Layout>
  <div class="flex items-center justify-center h-screen bg-gray-100">
    <div class="bg-white p-8 rounded shadow-md w-full max-w-sm">
      <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">Log in</h2>
      <p class="text-gray-600 mb-6 text-center">
        Welcome back! Enter your email to log in.
      </p>
      <form method="POST">
        {
          errors.general && (
            <p class="mb-4 text-sm font-medium text-red-600 bg-red-50 p-2 rounded border border-red-500">
              {errors.general}
            </p>
          )
        }
        <label
          for="email"
          class={`block text-sm font-medium mb-2 ${
            errors.email ? "text-red-700" : "text-gray-700"
          }`}
        >
          Email:
        </label>
        <input
          type="email"
          id="email"
          name="email"
          placeholder="kale@example.com"
          required
          class={`border rounded-md p-2 w-full mb-4 ${
            errors.email
              ? "bg-red-50 border-red-500 placeholder-red-700 focus:ring-red-500 focus:border-red-500 !mb-0"
              : ""
          }`}
        />
        {
          errors.email && (
            <p class="my-2 text-sm font-medium text-red-600">
              Oops! {errors.email}
            </p>
          )
        }
        <button
          data-testid="login-btn"
          class="bg-blue-500 text-white rounded-md p-2 w-full mb-2 hover:bg-blue-600"
          >Continue</button
        >
      </form>
      <p class="mt-6 text-sm text-center text-gray-600">
        Haven't joined yet? <a href="#" class="text-orange-500 hover:underline"
          >Create an account</a
        >
      </p>
    </div>
  </div>
</Layout>
