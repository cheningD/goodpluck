---
import { stytch } from "@src/lib/stytch";
import Layout from "../layouts/Layout.astro";
import { swell } from "src/lib/swell";
import type { Card } from "swell-js";
import { getCartFromSession } from "@src/lib/swell/cart";
import MapboxAutofill from "@components/solid/MapboxAutofill";
import MapboxConfirmation from "@components/solid/MapboxConfirmation";

interface SafeCard {
  id: string;
  brand: string;
  last4: string;
  exp_month: number;
  exp_year: number;
  name: string;
  isDefault?: boolean;
}

const errors = { err: "" };

// Retrieve session token
const sessionToken = Astro.cookies.get("gp_session_token")?.value as string;
const session = sessionToken
  ? await stytch.sessions.authenticate({ session_token: sessionToken })
  : null;
const email = session?.user.emails[0].email;
if (!session || !email || !(await swell.get(`/accounts/${email}`))) {
  return Astro.redirect(
    !session
      ? "/?message=" + encodeURIComponent("You are not logged in")
      : "/create-account",
  );
}

const mapboxToken = import.meta.env.MAPBOX_DEFAULT_PUBLIC_TOKEN;
const cards = (await swell.get(`/accounts/${email}/cards`)).results;
const account = await swell.get(`/accounts/${email}`);
const defaultCard = cards.find(
  (card: Card) => card.token === account?.billing?.card?.token,
);
const safeCards = cards.map((card: Card) => {
  const safeCard: SafeCard = {
    id: card.id as string,
    brand: card.brand as string,
    last4: card.last4 as string,
    exp_month: card.exp_month as number,
    exp_year: card.exp_year as number,
    name: card.billing?.name as string,
  };
  if (defaultCard && card.token === defaultCard.token) {
    safeCard.isDefault = true;
  }
  return safeCard;
});

// Generate months and years for expiration date
const months = Array.from({ length: 12 }, (_, i) => ({
  value: (i + 1).toString().padStart(2, "0"),
  label: (i + 1).toString().padStart(2, "0"),
}));
const currentYear = new Date().getFullYear();
const years = Array.from({ length: 21 }, (_, i) => ({
  value: currentYear + i,
  label: currentYear + i,
}));

if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const cardId = data.get("card_id")?.toString();

  if (cardId) {
    // Sets card as default payment method
    await swell.put(`/accounts/${email}`, {
      billing: {
        account_card_id: cardId,
      },
    });

    // Updates cart with new billing address and payment method
    const cart = await getCartFromSession(sessionToken as string);
    if (cart) {
      await swell.put(`/carts/${cart.id}`, {
        billing: {
          account_card_id: cardId,
        },
      });
    }

    return Astro.redirect(
      "/yourpayments?message=" + encodeURIComponent("Default card updated"),
    );
  }

  const token = data.get("token")?.toString();
  const name = data.get("name")?.toString();
  const useShippingAddress = data.get("same_as_shipping")?.toString() === "on";
  const address1 = data.get("address address-search")?.toString();
  const city = data.get("billing_city")?.toString();
  const state = data.get("billing_state")?.toString();
  const zip = data.get("billing_zip")?.toString();
  const setAsDefaultMethod = data.get("default")?.toString() === "on";
  const shipping = useShippingAddress
    ? account.shipping
    : {
        address1,
        city,
        state,
        zip,
        phone: account.shipping.phone,
        country: "US",
      };

  // Get current payment methods to check if card already exists
  const card = await swell.post(`/accounts:cards`, {
    parent_id: account.id,
    token,
    billing: {
      name,
      ...shipping,
    },
  });

  if (setAsDefaultMethod) {
    // Adds card to account as default payment method
    const updatedAccount = await swell.put(`/accounts/${email}`, {
      billing: {
        account_card_id: card.id,
      },
    });

    // Updates cart with new billing address and payment method
    const cart = await getCartFromSession(sessionToken as string);
    if (cart) {
      await swell.put(`/carts/${cart.id}`, {
        billing: updatedAccount.billing,
      });
    }
  }

  return Astro.redirect(
    "/yourpayments?message=" + encodeURIComponent("Card added successfully"),
  );
}
---

<Layout>
  <div class="flex w-full">
    <!-- Current Cards Section -->
    <div class="flex flex-col w-1/3 mr-10">
      <h2 class="text-2xl font-bold text-gray-900 my-4">Your Cards</h2>
      <div class="cards-container">
        <!-- Iterating over cards array -->
        {
          safeCards.map((card: SafeCard) => (
            <div class="card mb-4 p-4 border rounded-md">
              {card.isDefault && (
                <p class="underline decoration-dotted text-xs font-medium text-gray-700 mb-2">
                  Default
                </p>
              )}
              <p>
                <strong>Card Brand:</strong> {card.brand}
              </p>
              <p>
                <strong>Name:</strong> {card.name}
              </p>
              <p>
                <strong>Card Ending in:</strong> {card.last4}
              </p>
              <p>
                <strong>Expires:</strong> {card.exp_month}/{card.exp_year}
              </p>
              {!card.isDefault && (
                <form method="POST" class="set-default-form">
                  <input type="hidden" name="card_id" value={card.id} />
                  <button class="bg-blue-500 text-white rounded-lg p-2 my-4 hover:bg-blue-600">
                    Set as default
                  </button>
                </form>
              )}
            </div>
          ))
        }
      </div>
    </div>

    <!-- Add Card Section -->
    <div class="flex flex-col w-2/3">
      <h2 class="text-2xl font-bold text-gray-900 my-4">
        Add a Payment Method
      </h2>

      <!-- Error message -->
      <div class="text-red-500 mb-4 error-msg">
        {errors.err}
      </div>

      <form method="POST" id="payment_form">
        <!-- Name on card -->
        <div class="input-group">
          <label
            for="name"
            class="label block text-sm font-medium text-gray-700 mb-2"
            >Name on card</label
          >
          <input
            type="text"
            id="name"
            name="name"
            placeholder="Bob the Tomato"
            required
            class="input border rounded-md p-2 w-1/2 mb-4"
          />
        </div>

        <!-- Card number -->
        <div class="input-group">
          <label
            for="number"
            class="label block text-sm font-medium text-gray-700 mb-2"
            >Card Number</label
          >
          <input
            type="text"
            id="number"
            name="number"
            placeholder="4242424242424242"
            required
            pattern="[0-9]{15,16}"
            maxlength="16"
            minlength="15"
            class="input border rounded-md p-2 w-1/2 mb-4"
            title="Credit card number must be 16 digits"
          />
        </div>

        <!-- Expiration date -->
        <div class="flex mb-4">
          <div class="input-group">
            <label
              for="exp_month"
              class="label block text-sm font-medium text-gray-700 mb-2 mr-4"
              >Expiration Month</label
            >
            <select
              id="exp_month"
              name="exp_month"
              required
              class="select border rounded-md"
            >
              {
                months.map((month) => (
                  <option value={month.value}>{month.label}</option>
                ))
              }
            </select>
          </div>
          <div class="input-group">
            <label
              for="exp_year"
              class="label block text-sm font-medium text-gray-700 mb-2"
              >Expiration Year</label
            >
            <select
              id="exp_year"
              name="exp_year"
              required
              class="select border rounded-md"
            >
              {
                years.map((year) => (
                  <option value={year.value}>{year.label}</option>
                ))
              }
            </select>
          </div>
        </div>

        <!-- CVC -->
        <div class="input-group">
          <label
            for="cvc"
            class="label block text-sm font-medium text-gray-700 mb-2"
            >CVC</label
          >
          <input
            type="text"
            id="cvc"
            name="cvc"
            placeholder="123"
            required
            pattern="[0-9]{3,4}"
            maxlength="4"
            minlength="3"
            class="input border rounded-md p-2 w-1/2 mb-4"
            title="CVC must be 3 digits"
          />
        </div>

        <!-- Checkbox for same as shipping address -->
        <div class="input-group">
          <input
            type="checkbox"
            id="same_as_shipping"
            name="same_as_shipping"
            checked
            class="mr-2"
            onclick="toggleBillingAddress(this)"
          />
          <label
            for="same_as_shipping"
            class="text-sm font-medium text-gray-700"
          >
            Billing address is the same as shipping address
          </label>
        </div>

        <!-- Billing Address Fields -->
        <div id="billing_address_fields" class="hidden mt-4">
          <div class="input-group">
            <label
              for="billing_street"
              class="label block text-sm font-medium text-gray-700 mb-2"
              >Street Address</label
            >
            <input
              type="text"
              id="billing_street"
              name="address"
              autocomplete="address-line1"
              class="input border rounded-md p-2 w-1/2 mb-4"
            />
          </div>

          <div class="input-group">
            <label
              for="billing_city"
              class="label block text-sm font-medium text-gray-700 mb-2"
              >City</label
            >
            <input
              type="text"
              id="billing_city"
              name="billing_city"
              autocomplete="address-level2"
              class="input border rounded-md p-2 w-1/2 mb-4"
            />
          </div>

          <div class="input-group">
            <label
              for="billing_state"
              class="label block text-sm font-medium text-gray-700 mb-2"
              >State</label
            >
            <input
              type="text"
              id="billing_state"
              name="billing_state"
              autocomplete="address-level1"
              class="input border rounded-md p-2 w-1/2 mb-4"
            />
          </div>

          <div class="input-group">
            <label
              for="billing_zip"
              class="label block text-sm font-medium text-gray-700 mb-2"
              >Zip Code</label
            >
            <input
              type="text"
              id="billing_zip"
              name="billing_zip"
              autocomplete="postal-code"
              class="input border rounded-md p-2 w-1/2 mb-4"
            />
          </div>
        </div>

        <!-- Set as default method -->
        <div class="input-group">
          <input type="checkbox" id="default" name="default" class="mr-2" />
          <label for="default" class="text-sm font-medium text-gray-700">
            Set as default payment method
          </label>
        </div>

        <!-- Hidden Token -->
        <input type="hidden" name="token" />

        <!-- Submit button -->
        <button
          class="bg-blue-500 text-white rounded-md p-2 w-full my-4 hover:bg-blue-600"
          type="submit"
        >
          Submit
        </button>
      </form>
    </div>
  </div>

  <MapboxAutofill client:only mapboxToken={mapboxToken} />
  <MapboxConfirmation client:only mapboxToken={mapboxToken} />

  <script>
    import { initSwell } from "../lib/swell-js";

    const form = document.querySelector("#payment_form") as HTMLFormElement;
    form?.addEventListener("submit", async (e: Event) => {
      e.preventDefault();
      try {
        const swell = initSwell(
          import.meta.env.PUBLIC_SWELL_STORE_ID,
          import.meta.env.PUBLIC_SWELL_PUBLIC_KEY,
        );

        const formData = new FormData(form);
        const { number, exp_month, exp_year, cvc } = Object.fromEntries(
          formData.entries(),
        );

        const response = await swell.card.createToken({
          number,
          exp_month,
          exp_year,
          cvc,
        });

        const tokenInput = form.querySelector(
          "input[name=token]",
        ) as HTMLInputElement;
        if (tokenInput) {
          tokenInput.value = response.token;
        }

        form.submit();
      } catch (error) {
        const errorDiv = document.querySelector(".error-msg");
        if (errorDiv) {
          errorDiv.textContent = error as string;
        }
      }
    });

    const toggleBillingAddress = (checkbox: HTMLInputElement) => {
      const billingAddressFields = document.getElementById(
        "billing_address_fields",
      );
      if (billingAddressFields) {
        const displayStyle = checkbox.checked ? "none" : "block";
        billingAddressFields.style.display = displayStyle;

        const inputs = billingAddressFields.querySelectorAll("input");
        inputs.forEach((input) => {
          input.required = displayStyle === "block";
        });
      }
    };

    const checkbox = document.getElementById(
      "same_as_shipping",
    ) as HTMLInputElement;
    checkbox?.addEventListener("click", () => {
      toggleBillingAddress(checkbox);
    });

    toggleBillingAddress(checkbox);
  </script>
</Layout>
