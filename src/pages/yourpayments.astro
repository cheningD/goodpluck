---
import { stytch } from "@src/lib/stytch";
import Layout from "../layouts/Layout.astro";
import { swell } from "src/lib/swell";
import type { Card } from "swell-js";
import { getCartFromSession } from "@src/lib/swell/cart";

const errors = { err: "" };

// Retrieve session token
const sessionToken = Astro.cookies.get("gp_session_token")?.value as string;
const session = sessionToken
  ? await stytch.sessions.authenticate({ session_token: sessionToken })
  : null;
const email = session?.user.emails[0].email;
if (!session || !email || !(await swell.get(`/accounts/${email}`))) {
  return Astro.redirect(
    !session
      ? "/?message=" + encodeURIComponent("You are not logged in")
      : "/create-account",
  );
}

// Generate months and years for expiration date
const months = Array.from({ length: 12 }, (_, i) => ({
  value: (i + 1).toString().padStart(2, "0"),
  label: (i + 1).toString().padStart(2, "0"),
}));
const currentYear = new Date().getFullYear();
const years = Array.from({ length: 21 }, (_, i) => ({
  value: currentYear + i,
  label: currentYear + i,
}));

// Get current payment methods
const cards = (await swell.get(`/accounts/${email}/cards`)).results;

if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const token = data.get("token")?.toString();
  const name = data.get("name")?.toString();
  const account = await swell.get(`/accounts/${email}`);
  const card = await swell.post(`/accounts:cards`, {
    parent_id: account.id,
    token,
    billing: {
      name,
      ...account.shipping,
    },
  });

  if (!cards.some((c: Card) => c.id === card.id)) {
    // Adds card to account as default payment method
    const updatedAccount = await swell.put(`/accounts/${email}`, {
      billing: {
        account_card_id: card.id,
      },
    });

    // Updates cart with new billing address and payment method
    const cart = await getCartFromSession(sessionToken);
    if (cart) {
      await swell.put(`/carts/${cart.id}`, {
        billing: updatedAccount.billing,
      });
    }

    return Astro.redirect(
      "/yourpayments?message=" + encodeURIComponent("Card added successfully"),
    );
  } else {
    errors.err = "Card already exists";
    console.error(errors.err);
  }
}
---

<Layout>
  <div class="flex flex-col w-1/2">
    <h2 class="text-2xl font-bold text-gray-900 my-4">Add a Payment Method</h2>

    <!-- Error message -->
    <div class="text-red-500 mb-4 error-msg">
      {errors.err}
    </div>

    <form method="POST">
      <!-- Name on card -->
      <div class="input-group">
        <label
          for="name"
          class="label block text-sm font-medium text-gray-700 mb-2"
          >Name on card</label
        >
        <input
          type="text"
          id="name"
          name="name"
          placeholder="Bob the Tomato"
          required
          class="input border rounded-md p-2 w-1/2 mb-4"
        />
      </div>

      <!-- Card number -->
      <div class="input-group">
        <label
          for="number"
          class="label block text-sm font-medium text-gray-700 mb-2"
          >Card Number</label
        >
        <input
          type="text"
          id="number"
          name="number"
          placeholder="4242424242424242"
          required
          pattern="[0-9]{16}"
          maxlength="16"
          minlength="15"
          class="input border rounded-md p-2 w-1/2 mb-4"
          title="Credit card number must be 16 digits"
        />
      </div>

      <!-- Expiration date -->
      <div class="flex mb-4">
        <div class="input-group">
          <label
            for="exp_month"
            class="label block text-sm font-medium text-gray-700 mb-2 mr-4"
            >Expiration Month</label
          >
          <select
            id="exp_month"
            name="exp_month"
            required
            class="select border rounded-md"
          >
            {
              months.map((month) => (
                <option value={month.value}>{month.label}</option>
              ))
            }
          </select>
        </div>
        <div class="input-group">
          <label
            for="exp_year"
            class="label block text-sm font-medium text-gray-700 mb-2"
            >Expiration Year</label
          >
          <select
            id="exp_year"
            name="exp_year"
            required
            class="select border rounded-md"
          >
            {
              years.map((year) => (
                <option value={year.value}>{year.label}</option>
              ))
            }
          </select>
        </div>
      </div>

      <!-- CVC -->
      <div class="input-group">
        <label
          for="cvc"
          class="label block text-sm font-medium text-gray-700 mb-2">CVC</label
        >
        <input
          type="text"
          id="cvc"
          name="cvc"
          placeholder="123"
          required
          pattern="[0-9]{3}"
          maxlength="3"
          minlength="3"
          class="input border rounded-md p-2 w-1/2 mb-4"
          title="CVC must be 3 digits"
        />
      </div>

      <input type="hidden" name="token" />

      <!-- Submit button -->
      <button
        class="bg-blue-500 text-white rounded-md p-2 w-full my-4 hover:bg-blue-600"
        type="submit"
      >
        Submit
      </button>
    </form>
  </div>

  <script>
    import { initSwell } from "../lib/swell-js";

    const form = document.querySelector("form");
    form?.addEventListener("submit", async (e: Event) => {
      e.preventDefault();
      try {
        const swell = initSwell(
          import.meta.env.PUBLIC_SWELL_STORE_ID,
          import.meta.env.PUBLIC_SWELL_PUBLIC_KEY,
        );

        const formData = new FormData(form);
        const { number, exp_month, exp_year, cvc } = Object.fromEntries(
          formData.entries(),
        );

        const response = await swell.card.createToken({
          number,
          exp_month,
          exp_year,
          cvc,
        });

        const tokenInput = form.querySelector(
          "input[name=token]",
        ) as HTMLInputElement;
        if (tokenInput) {
          tokenInput.value = response.token;
        }

        form.submit();
      } catch (error) {
        const errorDiv = document.querySelector(".error-msg");
        if (errorDiv) {
          errorDiv.textContent = error as string;
        }
      }
    });
  </script>
</Layout>
